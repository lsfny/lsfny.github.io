[{"title":"Hexo博客（III）","url":"/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88III%EF%BC%89/","content":"\n\nHexo图床问题我搜了一下，有人建议使用国内国外分流，我感觉太麻烦所以放弃了，直接使用国内的图床吧，中文也没几个看得懂。\n不过 draft 可以转成 post ，post 能转到 draft 吗。\n本来打算用阿里云图床的，说是40GB一年也才九块，但是看到有推荐bilibili图床的，免费🆓的，就用了。\n首先在 Obsidian 里下个 Image auto upload plugin ，然后就可以直接粘贴剪切板的图片使用 picgo 上传图片了。\n这个文件看着实在不美观，也不知道怎么改，不会又是覆盖不是同步吧，那样只能试试 GitHub Actions 了。\n在本地预览使用 bilibili 的图片都显示不出来，更别说部署到网上了，然后意外发现如果 GitHub 上的又能显示图片了，可能昨天网络不好吧。\n用回 GitHub 图床之后有时候又显示不出来照片，好烦啊，国内这网络环境。加个公告让开梯子看吧，要不就去用阿里的服务器吧。\n搜到一篇文章说怎么处理图片不显示的\n\n解决方法 ：只需要在markdown文章开头添加一个&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;\n\n关于他说的 403 报错我倒是没看见。接着用回 bilibili 图床吧。官方说的创建一个同名的文件夹放图片感觉不好很麻烦，不想试。\n关于为什么要写博客，找到一段很能描述我内心的文章，下面是其中的引用\n\n我是从去年入的个人博客的坑，当中尝试过很多不同的方式，也碰到过好不容易写完的博文说没就没了的尴尬场面。但我最后还是选择继续用下去，因为我觉得写博文真的是一件非常快乐的事情，虽然可能没有听众，但是把自己知道的，摸索出来的东西写下来，分享出来，并不单单是想要别人来看，更有一种记录生活的感觉。\n如果是像我一样喜欢折腾的人，那么选择自己搭建个人博客，势必会走上一条曲折的道路。自己跟着教程一步步走下来，最后得到的，却也许并不是原先期望的那样。不喜欢折腾的人也许就会将就着用下去，但我倔强地坚持要得到我想要的。自己不断寻找问题，解决问题，那么在解决的那一刻真的是浑身舒畅。但是然后呢？我选择把整个过程或是解决方案记录下来，放在博客里。每次折腾势必会看到，告诉我自己已经解决了那么多的困难，这一次也一定能成功。它能够激励我不断走下去。\n那对与不喜欢折腾的人来说呢？这样的记录就毫无意义了吗？显然并不是这样。如我开头所言，将生活记录下来，过一段时间再打开，回想起当时的情形，真的是让我感到很温暖的一件事情。人们喜欢拍照，录像，通过照片与视频将生活记录下来。而我觉得，通过文字记录生活更是一个不错的选择。况且上传到博客上，说不定哪天就有人看到，留下自己的看法，或者能够一起讨论，似乎也很美好。\n也因此，我写了这样的一篇文章，希望有更多的人能喜欢上个人博客这样的记录方式。提到自建，许多人的第一反应就是麻烦，复杂，因此我尽可能地详细写了搭建的各个步骤，就是希望能够让更多的人跨过这道门槛，通过个人博客的方式，记录生活，分享生活。\n\n上面这一部分 Obsidian 预览和浏览器预览效果不一样，原因是除了第一段，没在文字段➕ &gt; ，只给空行加了，在 Obsidian 看起来就和加了一样，看来不能偷懒啊，还有就是去重温一下引用的语法 😿。\n（我要成为 emoji 高手 😅）\nObsidian 的模板真好用啊，才发现 Hexo 的标题是文章名。\n还有关于首页展示，我写的 markdown 语法那个，太丑了，他又每个都是将前面的内容显示在首页， 发现可以使用 excerpt 标签显示内容，就不会直接显示文章的前面部分内容了。读完 keep主题使用手册 的写作部分文章摘要与截断部分，知道 Hexo 支持三种方式实现刚才的功能。\n\n\nexpert2. &lt;!--more--&gt; (写完才发现没显示，应该是当作注释了，也难怪不起作用了)\n自动截断，Keep 主题将自动截取前 168 个字符。\n\n\n优先级从高到底也是 1-3 。\n实战为先，发现第二个方法没用啊，第三个有不符合我的要求，只能使用 excerpt 来实现了，在 Obsidian 中又一直推用过的，看看到时候满了是什么情况。\n研究了一会自动化部署到 GitHub ，通过 GitHub Actions 自动部署，没成功，吸引我的原因是\n\n如果手动部署，需要先执行 hexo g 编译生成静态文件， 然后推送 public 整个文件夹到 GitHub 上，当后期网站文章、图片较多时候，很多时候连接 GitHub 不是那么顺畅，经常要傻等很长的上传时间。使用 GitHub Actions 自动部署，你只需 push _post 文件里单独的 md 文件即可，其他不用管。\n\n关于最开始要不要把所有的配置这些放上去也不知道，以后再试吧，只是怕以后说不定真的文章图片多了变慢，我以为只会推变化的东西上去呢。\n不知道为啥，写完之后报错了，似乎是 hexo-reference 这个插件的问题。很怕再次出错，所以使用 git 刻不容缓。\n\n没找到用原生 markdown 语法修改图片大小的，都使用的 HTML 语法，但是我用的插件也不行啊，算了，感觉我也不会用到太多的图片，说不定博客都是三天打渔两天晒网。\npicgo首先要下载 bilibili 插件，然后登录打开控制台获取 SESSDATA 和 bili_jct 就可以使用了。\n开了上传前重命名，给的链接跟名字没有关系，就关掉了。\n相册删掉就没有了，也不知道用的那个图床，只能去 log 里面找，我以为 log 会是分开的，有 success、info、error 等等，结果仍然是在一个 log 文件里。\n我还想尝试下像 GitHub 的图床那样把没用的删了，找不到，想开了，不管了。\n至于图片，有个帖子说在本地备份一个，到时候就算服务器跑路了也可以批量修改重新上传，怎么上传呢，搜到了这样一段话\n\n社区没找到批量将本地图片上传图床的插件。我做过类似手动操作，不过前提是，我的几百张图片都放在同一个文件夹下。\n\n批量把整个图片文件夹上传到图床，获取图床的前缀链接。 \n用正则表达式批量替换库内的有图片引用的文件，加上图床的前缀链接。\n\n\n可不可行以后再说吧，不过这样就不能用QQ的截图了，不能保存。\n还要用到正则表达式，以前学过，没地方用，忘了。忘了的还有摩斯密码，之前想着用手指敲摩斯密码来辅助记单词形成肌肉记忆的。\n为了账号安全，重新创了个小号，正式会员的问题都让我很好笑。\ngit使用 git 的时候总会提示 CRLF 和 LF ，搜了一下，\n\nLF：”\\n”，Linux的换行符\nCRLF：”\\r\\n”，Windows的换行符\n\n补充：\n\nCR：Carriage Return，对应 ASCII 中转义字符 \\r，表示回车\nLF：Linefeed，对应 ASCII 中转义字符 \\n，表示换行\nCRLF：Carriage Return &amp; Linefeed，\\r\\n，表示回车并换行\n\n原因说了三个，两个人为的，在不同系统直接写代码，一个系统的原因\n\ngit的 core.autocrlf这个配置是True，即git pull时自动将远程代码里的换行符（比如LF）转换成当前系统的换行符（比如CRLF）Windows系统解决办法：修改 git 全局配置，禁止 git 自动将 lf 转换成 crlf, 命令\ngit config --global core.autocrlf false\n再次查看：\n&gt;git config --global -l\n\n\n结果如下：core.autocrlf=false\n看了一下自己的，发现还是显示的 true ，可能是全局和个人不一样，全局能覆盖个人吧，不过我怎么感觉是个人覆盖全局呢。\n关于 git 的设置目录，Windows 在用户文件夹的 .gitconfig 文件中，显示的也只是全局设置。\n\n--local 仓库级，只对某一个仓库起作用。\n--global 用户级，只对当前用户起作用。\n--system 系统级，对本电脑所以用户起作用。\n\n我也没有用 Linux，所以应该是 Obsidian 是使用的 LF。搜索了一下，的确如我想象的那样，😄。\nObsidian对于使用 markdown 写的文章，复制过来之后引用只能多次使用 &gt; 很麻烦，也没找到好办法，还有就是切换文件之后再回来只能从头开始，对于写长文章的来说有点麻烦了。有增加标签页，但是不像普通编辑器那样直接双击之后点击其他文章就新开一个标签页那样自然（可能是我没有发现，希望如果有人发现这篇文章并且恰好知道怎么做，在评论区留言）。\n没找到 markdown 语法中的引用，找到了其他的引用，似乎并没有什么用。\n突然想起有大纲啊，这下是我愚蠢了。\n不知道为啥我的 git 语法写到后面 Obsidian 不渲染了，网页上正常，阅读视图也正常，难道是因为使用 VSCode 联合编辑导致语法不对吗。但是复制代码过来总是代码块很麻烦啊删着。\n一点一点删了试终于发现问题了，git 语句没有用``引起来。\n","tags":["图床","碎碎念"]},{"title":"Hexo博客（II）","url":"/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88II%EF%BC%89/","content":"VSCode\n使用Shift + alt + ➡️即可实现扩大选区（感觉还是不如 IDEA 的Ctrl+W）\n\n浏览器使用Ctrl + F5可以强制刷新，应该是清掉缓存了，不需要再打开开发者模式删除缓存。\n知道这个的原因是昨天将 Hexo 部署到 GitHub Pages，显示与本地不一样，搜索了一下，需要先hexo clean清除缓存。今天试了一下，可以了。好多问题都是缓存啊，而且我对于缓存一点都不了解。\nHexo如果博客没有 title 无法使用主题的搜索功能。\n使用的keep主题，都挺好，美中不足的是代码部分右上角不能显示类型，shell是可以显示的，像conf这样的文件就显示不了。测试了一下，yml也是可以显示的，所以代码应该是都可以显示的，只是不能像 Obsidian 编辑时一样罢了，Obsidian 使用的阅读视图使shell类型都不显示的。\n拥有的博客不多，所以自动化部署还用不上。加上设置得差不多之后，只要写完之后使用\nhexo cleanhexo ghexo shexo d\n\n也不是太麻烦的事。文章名使用的模板都是日期，好在试了一下，可以修改 title 即可，文件名甚至都不需要修改，至于在 _posts 文件夹下嵌套可不可行还不知道。\n嵌套是可以的，就是部署之后路径名多了好长一串，看着不好看，大概是有解决方法的，我看见过。\n将_config.yml中的 permalink 从 permalink: :year/:month/:day/:title/ 修改为 permalink: :title/ 即可。\n重复修改之后主题再上传到 GitHub Page 发现内容分发变成了三个，比我预想的还要多一个，想的是应该覆盖，奈何天不遂人愿。找不到办法就删库吧。\n删库了，重新上传了，然后发现如果不开梯子 logo 显示不出来，我试了重新创建一个 index.html 文件，用图床的链接，很快就加载出来了，为什么呢。\n有个好消息，把前缀这些弄掉后使用文件夹嵌套不就可以了吗，还不用担心文件夹很乱，现在的 GitHub 上的文件看着就全在主页面，看着就令人担心。\nObsidian很容易将 Obsidian 大成 Obdisian，还有把`大成tab。\nObsidian里使用tab在编辑的时候会将整行后移两个字符，阅读视图不会有影响。最开始还以为会是引用的效果。\n关于 tag，最开始使用的时候发现有候选，我明明什么都没写。展开 Obsidian 右栏之后有 标签，发现是 node_modules 中的，最开始打算一个一个删，因为是更新日志删了不影响。为了效率，发现将这个文件夹忽略即可。\n将小写的 Obsidian 换成了大写，还好不多。不过 Obsidian 似乎没有Ctrl + R进行替换的功能啊。\n关于tag，使用# + 字符串就能实现tag（可以有数字，但是不能全是数字），keep主题的tag我还不会用，看到过默认主题landscapes的 tag，看着有用，所以就尝试使用 tag了。\n关于博客的中文英文直接要不要加空格，感觉加了好看，但是如果有人复制又要去一个个调整格式会很麻烦。我看到的好像是英语标点之后加空格，记不清了。决定的是添加空格，这样好看，不过需要慢慢养成一个习惯了。\n图床使用 picgo 将图片上传到 GitHub 失败，发现有日志，显示的 Request failed with status code 401，身份认证失败好像是，将 token 更新就能用了。\n为什么要用图床，我的博客本地预览可以看，但是部署到 GitHub 之后就 logo 和头像都显示不了，只能去用图床了，希望加载可以快点。\n关于 piggo，VSCode 的插件将网址保存在了用户目录的vs-picgo-data.json文件中，客户端的在软件的相册中。\n\n","tags":["碎碎念","Obsidian","VSCode","学习记录","浏览器"]},{"title":"Hexo博客（IV）","url":"/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88IV%EF%BC%89/","content":"Obsidian才创建博客就出现问题，插入模板有问题，title 和 date 都没显示，昨天明明还可以。可能是 VSCode 自动修改了啥，使用 &#123;&#123;title&#125;&#125; 就可以直接使用变量而不是单纯的 title 字符了。\nHexo找到一个博客，刚好还把博客的源码发出来了，连设置这些都有，可能发现问题了，后面的就没有了，主题应该也是 keep ，发现他们的  &lt;!-- more--&gt; 语法可以用，为什么啊，是我版本太高不适配了吗。去试了一下，现在又可以了。\n发现他们其他使用 Hexo 的头像和 logo 都是使用的仓库下 image 目录中的图片，为啥我之前用的时候不显示呢。\n他们的博客果然好啊，尤其是开放源码，让我知道怎么使用 page ，直接使用 hexo new page tag ，里面什么都不需要写，然后在 _keep.yml 文件中将 tags 就可以。\n必须将帮助我的博客的地址写下来，至于以后会不会把博客的源码仓库删掉就不知道了。\n还有就是他的文字，不是像默认的那样一个一个弹出来的，应该是使用 inject 注入的吧，指南里是这么写的。\n把背景图片首屏的背景图片改了，感谢网站，选择图片之后还能在线编辑，调成适合夜间模式的图片。\ngitGit设置全局http代理和https代理\ngit config --global http.proxy 127.0.0.1:7890git config --global https.proxy 127.0.0.1:7890\n取消这两个全局代理\ngit config --global --unset http.proxygit config --global --unset https.proxy\n\n之前看到的文章有更简单的方法，编辑一个终端文件，例如 .zsh_profile ，编辑代码\nfunction proxy_on() &#123;    export http_proxy=http://127.0.0.1:7890    export https_proxy=\\$http_proxy    git config --global http.proxy 127.0.0.1:7890    git config --global https.proxy 127.0.0.1:7890    echo -e &quot;终端代理已开启。&quot;    echo -e &quot;git代理已开启。&quot;&#125;function proxy_off()&#123;    unset http_proxy https_proxy    git config --global --unset http.proxy    git config --global --unset https.proxy    echo -e &quot;终端代理已关闭。&quot;    echo -e &quot;git代理已关闭。&quot;&#125;\n\n接着使用 source .zsh_profile ,然后 proxy_on 就可以开启代理了。测试使用 curl -I http://www.google.com 结果为 HTTP/1.1 200 OK 就是成功的。亲测对当时有效，关闭或者切换终端之后就没用了，所以也不用担心产生多余垃圾，不过 git 的代理设置是才加上去的，还没测试过。\npicgo看了个文章，说WebP格式效果好，然后又心动了，可是那个 compress 插件就是安不上，最后找到了 issue 里的方法解决了。\n\n我试了好久，最终 先删掉了picgo&#x2F;node_modules里面的所有内容， 开了全局代理后，用yarn官方的源，设置了代理\nyarn config set proxy http://127.0.0.1:1081yarn config set https-proxy http://127.0.0.1:1081\n其中1081和电脑代理设置里开的端口一致\n\n之后使用 yarn add picgo-plugin-compress 就可以成功安装了。\n安装之后 GUI 安装 bilibili 图床又不行了，使用 npm 安装也不行，用 yarn 安装就成功了，至于怎么关闭 yarn 的代理就有点麻烦了，和前面的 git 部分应该差不多把。\n看了下 bilibili 图床插件的网站，提到了支持WebP格式，还可以自定义压缩，不过只是使用吧，上传的应该还是原来的格式，而且如果都要加后缀用着也太麻烦了，看了下 issue ，发现 picgo 可以自定义链接格式。以及解释了我昨天的怎么删除图床内容的疑问。\n\n存在一个B站的公共静态资源空间。举例：所有人上传的图片都会放在这个空间里面，但是你不发布动态的话，那么这个资源与你就没有绑定关系，那么你自然是找不到的。你发布了的话，你的这条动态就会跟这个图片资源绑定关系，那么查看的时候，就知道这个动态绑定了哪些图片链接，就可以看到对应的图片了。\n\n还有关于使用的问题。多段，有点麻烦，直接粘贴图片。\n\n使用 bilibili 图床，不支持 WebP，我用的 tinypng 最开始没有用 API Key 导致没成功，后来成功了，要注册账号，上传有点慢，而且最新的稳定版 picgo 有 bug 。使用 scoop 安装指定版本只要在安装命令最后加上 @version 就可以了，又学到了。issue 真是好东西啊，可惜之前没看过，因为大部分都是英文。\nbilibili 图床非得登录才能用，好麻烦啊。要不回去用 GitHub 图床吧，主要怕bilibili 倒闭了，网上天天看唱衰他的，感觉挺好用的啊。\nTinyPNG 一个月内使用 500 次以内免费，真好。一个月肯定用不了那么多，而且可以创多个 API Key，不知道能不能叠加 ，compress 的作者说的意思是能叠加的。\n还有一个保险措施就是在使用电脑的截图备份图片在本地。\n关于 picgo 的图片 log，我总是有强迫症，要把失败的删了，其实完全没必要吧。\nWindows使用自动部署的确可以上传，但是 image 文件夹多了好多我不需要的东西，看着不好看，我看另外的使用同一个主题的博客就没有，而且也是用的自动部署，我的还是照着他的做的呢。所以也不应该存在自己修改了 node 代码的原因吧。突然想到一个好办法，加他微信然后问一下。\n本地也是没有问题的，所以我想着下下来看看是不是哪编译得不一样。我搜的比对文件夹，结果全是比对文件。\n有一个靠谱点的文章，说使用 rebocopy 命令可以比对。还有个开源软件 WinMerge ，用 scoop 下载失败就不想下了。\n使用 🪟 + R  然后 cmd 接着用 Ctrl + Shift + Enter 可以使用管理员权限打开命令行，又学到了。\n","tags":["图床","Obsidian"]},{"title":"Hexo博客（I）","url":"/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88I%EF%BC%89/","content":"Ubuntu网络无法连接\n删除NetworkManager缓存文件\n\nservice NetworkManager stoprm /var/lib/NetworkManager/NetworkManager.stateservice NetworkManager start\n\n\n修改/etc/NetworkManager/NetworkManager.conf\n\nmanaged=true \n\n\n重启NetworkManager\n\nservice NetworkManager restart\nUbuntu没有node和npm\n使用sudo apt install nodejs npm\n注意值安装node不会自带npm\n安装的版本低，更新麻烦，放弃了\n\nVMwareVMware开机关机的时候会使用麦克风\nHexo使用不支持的语法hexo g将报错，例如[dco], &#123;#id&#125;\n同时默认不支持LaTeX语法，使用主题可能可以使用，有待实验。\n","tags":["#学习记录","Ubuntu"]},{"title":"Markdown语法","url":"/blog/Markdown%E8%AF%AD%E6%B3%95/","content":"基础语法\n标题 #\n段落 两个回车\n换行 多个空格或&lt;br&gt;\n强调 **\n引用 &gt;\n列表 1. - ，可使用tab保留连续性同时添加另一种元素\n代码块 四个缩进或```\n代码 `\n分割线 —\n链接 []()\n图片 ![]()\n\n拓展语法\n表格 围栏代码块 \n标题编号（obsidian似乎不支持）\n定义列表 \n脚注 [^1] [^1]:\n删除线 ~~\n任务列表 - []\nemoji : :\n\n其他\n下划线 &lt;u&gt;hello&lt;/u&gt;  效果：hello\n注释 %% hello world %% \n变量 []: \n放大文本 &lt;big&gt;big&lt;/big&gt;  效果：big\n缩小文本 &lt;small&gt;small&lt;/small&gt;  效果：small\n多彩文本 &lt;font color=orange&gt;这是一段橘色文本&lt;/font&gt;  效果：\n高亮 ==这里是一段高亮文本==  效果：==这里是一段高亮文本==\n上标 x^2^ （Obsidian中不支持，可以使用LaTeX）\n下标 H2o （同上）\n行内公式 \n公式块 $$\\begin{array}{lll} \\nabla\\times E &amp;=&amp; -\\;\\frac{\\partial{B}}{\\partial{t}} \\ \\nabla\\times H &amp;=&amp; \\frac{\\partial{D}}{\\partial{t}}+J \\ \\nabla\\cdot D &amp;=&amp; \\rho \\ \\nabla\\cdot B &amp;=&amp; 0 \\ \\end{array}$$（在Hexo中需要下载插件实现支持）\n\n"},{"title":"git语法","url":"/blog/git%E8%AF%AD%E6%B3%95/","content":"关于git，学过好几次，每一次都从头到尾学完了，但是没过多久就全忘了，只记得最基础的几个功能，有时候还因为没连接到 GitHub 导致命令执行失败，这次试着用所谓的 费曼学习法 会不会好点。\n基础首先是最基本的安装，Windows用户下载之后一直默认选项点下去就可以了，然后\n$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot;\n\n接着使用 git init 就可以将当前所在的目录编程一个 git 仓库了。\n使用 git add filename 添加到仓库，使用 git commit -m &quot;something&quot; 提交到仓库。\ngit status 查看结果，如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n工作区和暂存区\ngit add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。\n版本回退\ngit log命令查看历史记录，可以试试加上--pretty=oneline参数。\ngit reset命令回退版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\ngit reset --hard commit_id，回到回退之前的版本，前提找得到版本号。\ngit reflog用来记录你的每一次命令。\n\ngit checkout -- file可以丢弃工作区的修改。git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令。git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。\n删除文件\n用rm命令删了文件之后，你有两个选择\n一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit 。\n另一种情况是删错了，因为版本库里还有呢，git checkout -- filename ，git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\ngit rm test.txt 相当于是删除工作目录中的test.txt文件,并把此次删除操作提交到了暂存区\n使用git checkout -- test.txt相当于是让工作目录test.txt恢复到暂存区中test.txt的状态,\n但是工作目录中test.txt已经被删除,无法找到文件来再次删除所以报错,\n必须先使用git reset head test.txt在暂存区中将删除操作丢弃,\n然后在git checkout -- test.txt就是直接将工作目录中test.txt恢复到版本库中的状态.\n\n\n\n远程仓库首先是基础且繁复的 SSH Key 公钥，使用博客时搜了好多东西第一步都是这个，所以不重复奖了，重要的一点就是创建的时候一直回车，不要设置密码。如果失败了删除重新创一个就是了，简单得很。\n创建仓库之后，在本地仓库目录下 git remote add origin git@github.com:yourname/repo.git 即可连接远程库。最后那部分直接点你仓库的 ssh 复制即可。\n添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。更通俗的解释\n\n你的本地库名字叫learngit，远程库全名叫&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;:michaelliao&#x2F;learngit.git\n但每次推送让你敲个全名你会疯的，所以起个别名origin\n每次敲命令git push origin master的时候，git看到origin，就去当前库的配置文件里找，看看它的全名到底写的啥\n你也可以起别的名字，如果有多个远程库，那必然不同的远程库对应不同的名字\n\ngit push -u origin master（现在是 main ），git push命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n（远程库不是空的时候就不知道怎么办了）\n（现在似乎推送之前多了一步 git branch -M main ）\n如果添加的时候地址写错了，或者就是想删除远程库，可以用git remote rm &lt;name&gt;命令。使用前，建议先用git remote -v查看远程库信息。\n分支管理\ngit checkout -b dev 创建dev分支，然后切换到dev分支，git checkout命令加上-b参数表示创建并切换。\n相当于git branch dev，git checkout dev 两个命令。\ngit branch命令查看当前分支。\ngit merge命令用于合并指定分支到当前分支。\ngit branch -d dev 删除dev分支。\n最新版本的Git提供了新的git switch命令来切换分支。\ngit log --graph --pretty=oneline --abbrev-commit 查看分支的合并情况。\ngit log --graph命令可以看到分支合并图。\n默认使用 Fast forward 模式，删除分支后，会丢掉分支信息，使用 git merge --no-ff -m &quot;merge with no-ff&quot; dev表示禁用 Fast forward 。\n因为 --no-ff 合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。\n合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n\n\n\ngit stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作\ngit stash pop，恢复的同时把stash内容也删了。\n可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令git stash apply stash@&#123;0&#125;。\n在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick &lt;commit&gt;命令，把bug提交的修改“复制”到当前分支，避免重复劳动。\n如果要丢弃一个没有被合并过的分支，可以通过 git branch -D &lt;name&gt; 强行删除。\n\n多人协作\n在本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name。\ngit push origin dev 推送到对应分支。\npush 失败时先pull，pull失败建立关联。\n建立本地分支和远程分支的关联，使用 git branch --set-upstream branch-name origin/branch-name 。\nrebase操作可以把本地未push的分叉提交历史整理成直线。\n\n标签管理\ngit tag &lt;name&gt;就可以打一个新标签，默认打在最新提交的commit上。\n如果忘了打标签，找到历史提交的commit id，然后打上就可以了，git tag v0.9 f52c633 。\n使用 git tag 查看标签。\ngit show &lt;tagname&gt;查看标签信息。\n还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字。\ngit tag -d v0.1 删除标签。\ngit push origin &lt;tagname&gt; 推送某个标签到远程。\ngit push origin --tags 一次性推送全部尚未推送到远程的本地标签。\ngit push origin :refs/tags/&lt;tagname&gt; 可以删除一个远程标签\n\n","tags":["git"]},{"title":"将CapsLock键在单击和长按时分别映射为Esc和Ctrl","url":"/blog/%E5%B0%86CapsLock%E9%94%AE%E5%9C%A8%E5%8D%95%E5%87%BB%E5%92%8C%E9%95%BF%E6%8C%89%E6%97%B6%E5%88%86%E5%88%AB%E6%98%A0%E5%B0%84%E4%B8%BAEsc%E5%92%8CCtrl/","content":"忘记为啥，突然想着在IDEA写代码的时候使用vim了，搜了一下，找到了好几个网站，慢慢学，还是很有收获的，尤其今天我才知道原来那些IDE里的vim插件除了基本的移动编辑之外，还有插件可以使用，而且不需要下载，直接在配置文件里配置就可以使用。  \n备注一下这些个网站，到时候又找不到了，不知道mastodon支不支持md文法。\n\n让我知道可以用插件的网站，配置也有一定的参考意义。\n从头开始学vim的网站，有一定基础更好，会教你配置VSCode中的vim插件。  \n上一个网站的easemotion插件配置没写好，这个网站算是补充。\n\nvim学到了一半，说之前教了怎么改键，将 Caps 修改为 Ctrl 我回去看，没找到，但是他这么一说我感觉的确需要改键的。找了好久，要么修改注册表，要么用其他软件，我试了下powertoys，感觉不好用，主要在任务栏有图标，太多了感觉不好看。\n看了好多把Caps映射为Esc 和 Ctrl 的，不过说的都是Linux上的，功夫不负有心人，最后找到了一个博客，还是说的Caps2Esc这个软件，不过是在Windows下用的。而且听他的说法好像是先有的Windows后面才移植到Linux的。\n为了避免作者到时候万一博客没了，还是复制一下他的过程。\n\n先下载文件（直接复制的作者的博客，如果觉得不安全可以到 GitHub 下载），解压\n\n使用快捷键Win + X，再按a即可打开管理员权限的 CMD 或者 Powershell 窗口，进入该文件夹，执行下列代码  \n.\\install-interception.exe /install\n\n点击caps2esc.exe (在 Interception\\samples\\x86 目录下 ) 就会拦截键盘输入，将Caps Lock同时映射为Esc和Ctrl\n\n但是每次都要点一次，这可不方便，所以我们可以把caps2esc.exe的快捷方式放入C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp （我找了一下，没找到，搜到如下方法\n\n\n文件位置打开后，按 Windows 徽标键+ R，键入“shell:startup”，然后选择“确定”。 这将打开“启动”文件夹。\n将该应用的快捷方式从文件位置复制并粘贴到“启动”文件夹中。\n\n\n\n\n），每次启动都会自动执行\n\n如果要卸载，重复第二步，执行代码\n\n.\\install-interception.exe /uninstall\n\n博客还有Linux的内容，但是网上大多都有，加上我不怎么使用 Linux，所以不重复摘录。\n修改完之后发现 Esc 键变成 Caps 键了，不过 Ctrl 倒是没有影响。\n","tags":["野生技术"]}]