<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lsfny&#39;s Blog</title>
  
  
  <link href="http://lsfny.github.io/atom.xml" rel="self"/>
  
  <link href="http://lsfny.github.io/"/>
  <updated>2024-07-04T01:40:22.000Z</updated>
  <id>http://lsfny.github.io/</id>
  
  <author>
    <name>LSFNY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将CapsLock键在单击和长按时分别映射为Esc和Ctrl</title>
    <link href="http://lsfny.github.io/blog/%E5%B0%86CapsLock%E9%94%AE%E5%9C%A8%E5%8D%95%E5%87%BB%E5%92%8C%E9%95%BF%E6%8C%89%E6%97%B6%E5%88%86%E5%88%AB%E6%98%A0%E5%B0%84%E4%B8%BAEsc%E5%92%8CCtrl/"/>
    <id>http://lsfny.github.io/blog/%E5%B0%86CapsLock%E9%94%AE%E5%9C%A8%E5%8D%95%E5%87%BB%E5%92%8C%E9%95%BF%E6%8C%89%E6%97%B6%E5%88%86%E5%88%AB%E6%98%A0%E5%B0%84%E4%B8%BAEsc%E5%92%8CCtrl/</id>
    <published>2024-07-04T01:05:11.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>忘记为啥，突然想着在IDEA写代码的时候使用vim了，搜了一下，找到了好几个网站，慢慢学，还是很有收获的，尤其今天我才知道原来那些IDE里的vim插件除了基本的移动编辑之外，还有插件可以使用，而且不需要下载，直接在配置文件里配置就可以使用。  </p><p>备注一下这些个网站，到时候又找不到了，不知道mastodon支不支持md文法。</p><ol><li>让我知道可以用插件的<a class="link"   href="https://jungejason.github.io/ideavim/" >网站<i class="fas fa-external-link-alt"></i></a>，配置也有一定的参考意义。</li><li>从头开始学vim的<a class="link"   href="https://vim.nauxscript.com/" >网站<i class="fas fa-external-link-alt"></i></a>，有一定基础更好，会教你配置VSCode中的vim插件。  </li><li>上一个网站的easemotion插件配置没写好，这个<a class="link"   href="https://www.cnblogs.com/YunyaSir/p/15522565.html" >网站<i class="fas fa-external-link-alt"></i></a>算是补充。</li></ol><p>vim学到了一半，说之前教了怎么改键，将 Caps 修改为 Ctrl 我回去看，没找到，但是他这么一说我感觉的确需要改键的。找了好久，要么修改注册表，要么用其他软件，我试了下powertoys，感觉不好用，主要在任务栏有图标，太多了感觉不好看。</p><p>看了好多把Caps映射为Esc 和 Ctrl 的，不过说的都是Linux上的，功夫不负有心人，最后找到了一个<a class="link"   href="https://orxing.top/post/d3c3145e.html" >博客<i class="fas fa-external-link-alt"></i></a>，还是说的Caps2Esc这个软件，不过是在Windows下用的。而且听他的说法好像是先有的Windows后面才移植到Linux的。</p><p>为了避免作者到时候万一博客没了，还是复制一下他的过程。</p><ol><li><p>先下载<a class="link"   href="https://www.lanzous.com/i7ucfla" >文件<i class="fas fa-external-link-alt"></i></a>（直接复制的作者的博客，如果觉得不安全可以到 GitHub 下载），解压</p></li><li><p>使用快捷键Win + X，再按a即可打开<strong>管理员权限</strong>的 CMD 或者 Powershell 窗口，进入该文件夹，执行下列代码  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\install-interception.exe /install</span><br></pre></td></tr></table></figure></li><li><p>点击caps2esc.exe (在 <code>Interception\samples\x86</code> 目录下 ) 就会拦截键盘输入，将Caps Lock同时映射为Esc和Ctrl</p></li><li><p>但是每次都要点一次，这可不方便，所以我们可以把<code>caps2esc.exe</code>的<strong>快捷方式</strong>放入<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> （我找了一下，没找到，搜到如下方法</p><blockquote><ol><li>文件位置打开后，按 <strong>Windows 徽标键</strong>+ <strong>R</strong>，键入“<strong>shell:startup</strong>”，然后选择“<strong>确定</strong>”。 这将打开“<strong>启动</strong>”文件夹。</li><li>将该应用的快捷方式从文件位置复制并粘贴到<strong>“启动”</strong>文件夹中。</li></ol></blockquote></li></ol><p>），每次启动都会自动执行</p><ol start="5"><li>如果要卸载，重复第二步，执行代码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\install-interception.exe /uninstall</span><br></pre></td></tr></table></figure><p>博客还有Linux的内容，但是网上大多都有，加上我不怎么使用 Linux，所以不重复摘录。</p><p>修改完之后发现 <code>Esc</code> 键变成 <code>Caps</code> 键了，不过 <code>Ctrl</code> 倒是没有影响。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;忘记为啥，突然想着在IDEA写代码的时候使用vim了，搜了一下，找到了好几个网站，慢慢学，还是很有收获的，尤其今天我才知道原来那些IDE里的vim插件除了基本的移动编辑之外，还有插件可以使用，而且不需要下载，直接在配置文件里配置就可以使用。  &lt;/p&gt;
&lt;p&gt;备注一下这些个</summary>
      
    
    
    
    
    <category term="野生技术" scheme="http://lsfny.github.io/tags/%E9%87%8E%E7%94%9F%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客（IV）</title>
    <link href="http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88IV%EF%BC%89/"/>
    <id>http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88IV%EF%BC%89/</id>
    <published>2024-06-15T00:49:46.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h1><p>才创建博客就出现问题，插入模板有问题，title 和 date 都没显示，昨天明明还可以。可能是 VSCode 自动修改了啥，使用 <code>&#123;&#123;title&#125;&#125;</code> 就可以直接使用变量而不是单纯的 title 字符了。</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>找到一个博客，刚好还把博客的源码发出来了，连设置这些都有，可能发现问题了，后面的就没有了，主题应该也是 keep ，发现他们的  <code>&lt;!-- more--&gt;</code> 语法可以用，为什么啊，是我版本太高不适配了吗。去试了一下，现在又可以了。</p><p>发现他们其他使用 Hexo 的头像和 logo 都是使用的仓库下 image 目录中的图片，为啥我之前用的时候不显示呢。</p><p>他们的博客果然好啊，尤其是开放源码，让我知道怎么使用 page ，直接使用 <code>hexo new page tag</code> ，里面什么都不需要写，然后在 <code>_keep.yml</code> 文件中将 tags 就可以。</p><p>必须将帮助我的<a class="link"   href="https://dionysen.github.io/" >博客<i class="fas fa-external-link-alt"></i></a>的地址写下来，至于以后会不会把博客的源码仓库删掉就不知道了。</p><p>还有就是他的文字，不是像默认的那样一个一个弹出来的，应该是使用 inject 注入的吧，指南里是这么写的。</p><p>把背景图片首屏的背景图片改了，感谢<a href="pixabay.com">网站</a>，选择图片之后还能在线编辑，调成适合夜间模式的图片。</p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>Git设置全局http代理和https代理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>取消这两个全局代理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>之前看到的<a class="link"   href="https://weilining.github.io/294.html?highlight=%E7%BB%88%E7%AB%AF" >文章<i class="fas fa-external-link-alt"></i></a>有更简单的方法，编辑一个终端文件，例如 <code>.zsh_profile</code> ，编辑代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function proxy_on() &#123;</span><br><span class="line">    export http_proxy=http://127.0.0.1:7890</span><br><span class="line">    export https_proxy=\$http_proxy</span><br><span class="line">    git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">    git config --global https.proxy 127.0.0.1:7890</span><br><span class="line">    echo -e &quot;终端代理已开启。&quot;</span><br><span class="line">    echo -e &quot;git代理已开启。&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">    unset http_proxy https_proxy</span><br><span class="line">    git config --global --unset http.proxy</span><br><span class="line">    git config --global --unset https.proxy</span><br><span class="line">    echo -e &quot;终端代理已关闭。&quot;</span><br><span class="line">    echo -e &quot;git代理已关闭。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着使用 <code>source .zsh_profile</code> ,然后 <code>proxy_on</code> 就可以开启代理了。测试使用 <code>curl -I http://www.google.com</code> 结果为 <code>HTTP/1.1 200 OK</code> 就是成功的。亲测对当时有效，关闭或者切换终端之后就没用了，所以也不用担心产生多余垃圾，不过 git 的代理设置是才加上去的，还没测试过。</p><h1 id="picgo"><a href="#picgo" class="headerlink" title="picgo"></a>picgo</h1><p>看了个文章，说WebP格式效果好，然后又心动了，可是那个 <code>compress</code> 插件就是安不上，最后找到了 issue 里的方法解决了。</p><blockquote><p>我试了好久，最终 先删掉了picgo&#x2F;node_modules里面的所有内容， 开了全局代理后，用yarn官方的源，设置了代理</p><p>yarn config set proxy <a class="link"   href="http://127.0.0.1:1081/" >http://127.0.0.1:1081<i class="fas fa-external-link-alt"></i></a><br>yarn config set https-proxy <a class="link"   href="http://127.0.0.1:1081/" >http://127.0.0.1:1081<i class="fas fa-external-link-alt"></i></a></p><p>其中1081和电脑代理设置里开的端口一致</p></blockquote><p>之后使用 <code>yarn add picgo-plugin-compress</code> 就可以成功安装了。</p><p>安装之后 GUI 安装 bilibili 图床又不行了，使用 npm 安装也不行，用 yarn 安装就成功了，至于怎么关闭 yarn 的代理就有点麻烦了，和前面的 git 部分应该差不多把。</p><p>看了下<a class="link"   href="https://github.com/xlzy520/picgo-plugin-bilibili?tab=readme-ov-file" > bilibili 图床插件<i class="fas fa-external-link-alt"></i></a>的网站，提到了支持WebP格式，还可以自定义压缩，不过只是使用吧，上传的应该还是原来的格式，而且如果都要加后缀用着也太麻烦了，看了下 issue ，发现 picgo 可以自定义链接格式。以及解释了我昨天的怎么删除图床内容的疑问。</p><blockquote><p>存在一个B站的公共静态资源空间。<br>举例：所有人上传的图片都会放在这个空间里面，但是你不发布动态的话，那么这个资源与你就没有绑定关系，那么你自然是找不到的。你发布了的话，你的这条动态就会跟这个图片资源绑定关系，那么查看的时候，就知道这个动态绑定了哪些图片链接，就可以看到对应的图片了。</p></blockquote><p>还有关于使用的问题。多段，有点麻烦，直接粘贴图片。</p><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/lsfny/images/PicGo202406151326761.webp"                        alt="image.png"                 ></p><p>使用 bilibili 图床，不支持 WebP，我用的 tinypng 最开始没有用 API Key 导致没成功，后来成功了，要注册账号，上传有点慢，而且最新的稳定版 picgo 有 bug 。使用 scoop 安装指定版本只要在安装命令最后加上 <code>@version</code> 就可以了，又学到了。issue 真是好东西啊，可惜之前没看过，因为大部分都是英文。</p><p>bilibili 图床非得登录才能用，好麻烦啊。要不回去用 GitHub 图床吧，主要怕bilibili 倒闭了，网上天天看唱衰他的，感觉挺好用的啊。</p><p>TinyPNG 一个月内使用 500 次以内免费，真好。一个月肯定用不了那么多，而且可以创多个 API Key，不知道能不能叠加 ，compress 的作者说的意思是能叠加的。</p><p>还有一个保险措施就是在使用电脑的截图备份图片在本地。</p><p>关于 picgo 的图片 log，我总是有强迫症，要把失败的删了，其实完全没必要吧。</p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>使用自动部署的确可以上传，但是 <code>image</code> 文件夹多了好多我不需要的东西，看着不好看，我看另外的使用同一个主题的博客就没有，而且也是用的自动部署，我的还是照着他的做的呢。所以也不应该存在自己修改了 node 代码的原因吧。突然想到一个好办法，加他微信然后问一下。</p><p>本地也是没有问题的，所以我想着下下来看看是不是哪编译得不一样。我搜的比对文件夹，结果全是比对文件。</p><p>有一个靠谱点的文章，说使用 <code>rebocopy</code> 命令可以比对。还有个开源软件 <code>WinMerge</code> ，用 scoop 下载失败就不想下了。</p><p>使用 <code>🪟 + R </code> 然后 <code>cmd</code> 接着用 <code>Ctrl + Shift + Enter</code> 可以使用管理员权限打开命令行，又学到了。</p>]]></content>
    
    
    <summary type="html">希望是最后的 Hexo 了，目标是自动化部署</summary>
    
    
    
    
    <category term="图床" scheme="http://lsfny.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="Obsidian" scheme="http://lsfny.github.io/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>git语法</title>
    <link href="http://lsfny.github.io/blog/git%E8%AF%AD%E6%B3%95/"/>
    <id>http://lsfny.github.io/blog/git%E8%AF%AD%E6%B3%95/</id>
    <published>2024-06-14T06:54:00.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于git，学过好几次，每一次都从头到尾学完了，但是没过多久就全忘了，只记得最基础的几个功能，有时候还因为没连接到 GitHub 导致命令执行失败，这次试着用所谓的 <code>费曼学习法</code> 会不会好点。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>首先是最基本的安装，Windows用户下载之后一直默认选项点下去就可以了，然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>接着使用 <code>git init</code> 就可以将当前所在的目录编程一个 git 仓库了。</p><p>使用 <code>git add filename</code> 添加到仓库，使用 <code>git commit -m &quot;something&quot;</code> 提交到仓库。</p><p><code>git status</code> 查看结果，如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p><h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><p><img                         lazyload                       alt="image"                       data-src="https://www.liaoxuefeng.com/files/attachments/919020074026336/0"                        alt="工作区与暂存区"                 ></p><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><ul><li><code>git log</code>命令查看历史记录，可以试试加上<code>--pretty=oneline</code>参数。</li><li><code>git reset</code>命令回退版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</li><li><code>git reset --hard commit_id</code>，回到回退之前的版本，前提找得到版本号。</li><li><code>git reflog</code>用来记录你的每一次命令。</li></ul><p><code>git checkout -- file</code>可以丢弃工作区的修改。<br><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令。<br><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。</p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><ul><li>用<code>rm</code>命令删了文件之后，你有两个选择</li><li>一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code> 。</li><li>另一种情况是删错了，因为版本库里还有呢，<code>git checkout -- filename</code> ，<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<blockquote><p><code>git rm test.txt</code> 相当于是删除工作目录中的test.txt文件,并把此次删除操作提交到了暂存区</p><p>使用<code>git checkout -- test.txt</code>相当于是让工作目录test.txt恢复到暂存区中test.txt的状态,</p><p>但是工作目录中test.txt已经被删除,无法找到文件来再次删除所以报错,</p><p>必须先使用<code>git reset head test.txt</code>在暂存区中将删除操作丢弃,</p><p>然后在<code>git checkout -- test.txt</code>就是直接将工作目录中test.txt恢复到版本库中的状态.</p></blockquote></li></ul><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>首先是基础且繁复的 SSH Key 公钥，使用博客时搜了好多东西第一步都是这个，所以不重复奖了，重要的一点就是创建的时候一直回车，不要设置密码。如果失败了删除重新创一个就是了，简单得很。</p><p>创建仓库之后，在本地仓库目录下 <code>git remote add origin git@github.com:yourname/repo.git</code> 即可连接远程库。最后那部分直接点你仓库的 ssh 复制即可。</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。更通俗的解释</p><blockquote><p>你的本地库名字叫learngit，远程库全名叫<a class="link"   href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;" >&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;<i class="fas fa-external-link-alt"></i></a>:michaelliao&#x2F;learngit.git</p><p>但每次推送让你敲个全名你会疯的，所以起个别名origin</p><p>每次敲命令git push origin master的时候，git看到origin，就去当前库的配置文件里找，看看它的全名到底写的啥</p><p>你也可以起别的名字，如果有多个远程库，那必然不同的远程库对应不同的名字</p></blockquote><p><code>git push -u origin master</code>（现在是 <code>main</code> ），<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><blockquote><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote><p>（远程库不是空的时候就不知道怎么办了）</p><p>（现在似乎推送之前多了一步 <code>git branch -M main</code> ）</p><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li><code>git checkout -b dev</code> 创建<code>dev</code>分支，然后切换到<code>dev</code>分支，<code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换。</li><li>相当于<code>git branch dev</code>，<code>git checkout dev</code> 两个命令。</li><li><code>git branch</code>命令查看当前分支。</li><li><code>git merge</code>命令用于合并指定分支到当前分支。</li><li><code>git branch -d dev</code> 删除dev分支。</li><li>最新版本的Git提供了新的<code>git switch</code>命令来切换分支。</li><li><code>git log --graph --pretty=oneline --abbrev-commit</code> 查看分支的合并情况。</li><li><code>git log --graph</code>命令可以看到分支合并图。</li><li>默认使用 <code>Fast forward</code> 模式，删除分支后，会丢掉分支信息，使用 <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>表示禁用 <code>Fast forward</code> 。</li><li>因为 <code>--no-ff</code> 合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</li><li>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</li></ul><p><img                         lazyload                       alt="image"                       data-src="https://www.liaoxuefeng.com/files/attachments/919023225142304/0"                        alt="不使用Fast forward模式"                 ></p><ul><li><code>git stash</code> 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</li><li><code>git stash pop</code>，恢复的同时把stash内容也删了。</li><li>可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令<code>git stash apply stash@&#123;0&#125;</code>。</li><li>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</li><li>如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D &lt;name&gt;</code> 强行删除。</li></ul><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul><li>在本地创建和远程分支对应的分支，使用 <code>git checkout -b branch-name origin/branch-name</code>。</li><li><code>git push origin dev</code> 推送到对应分支。</li><li>push 失败时先pull，pull失败建立关联。</li><li>建立本地分支和远程分支的关联，使用 <code>git branch --set-upstream branch-name origin/branch-name</code> 。</li><li>rebase操作可以把本地未push的分叉提交历史整理成直线。</li></ul><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ul><li><code>git tag &lt;name&gt;</code>就可以打一个新标签，默认打在最新提交的commit上。</li><li>如果忘了打标签，找到历史提交的commit id，然后打上就可以了，<code>git tag v0.9 f52c633</code> 。</li><li>使用 <code>git tag</code> 查看标签。</li><li><code>git show &lt;tagname&gt;</code>查看标签信息。</li><li>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字。</li><li><code>git tag -d v0.1</code> 删除标签。</li><li><code>git push origin &lt;tagname&gt;</code> 推送某个标签到远程。</li><li><code>git push origin --tags</code> 一次性推送全部尚未推送到远程的本地标签。</li><li><code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签</li></ul>]]></content>
    
    
    <summary type="html">关于git</summary>
    
    
    
    
    <category term="git" scheme="http://lsfny.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客（III）</title>
    <link href="http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88III%EF%BC%89/"/>
    <id>http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88III%EF%BC%89/</id>
    <published>2024-06-14T00:07:01.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>图床问题我搜了一下，有人建议使用国内国外分流，我感觉太麻烦所以放弃了，直接使用国内的图床吧，中文也没几个看得懂。</p><p>不过 draft 可以转成 post ，post 能转到 draft 吗。</p><p>本来打算用阿里云图床的，说是40GB一年也才九块，但是看到有推荐bilibili图床的，免费🆓的，就用了。</p><p>首先在 Obsidian 里下个 <code>Image auto upload plugin</code> ，然后就可以直接粘贴剪切板的图片使用 picgo 上传图片了。</p><p>这个文件看着实在不美观，也不知道怎么改，不会又是覆盖不是同步吧，那样只能试试 GitHub Actions 了。</p><p>在本地预览使用 bilibili 的图片都显示不出来，更别说部署到网上了，然后意外发现如果 GitHub 上的又能显示图片了，可能昨天网络不好吧。</p><p>用回 GitHub 图床之后有时候又显示不出来照片，好烦啊，国内这网络环境。加个公告让开梯子看吧，要不就去用阿里的服务器吧。</p><p>搜到一篇<a class="link"   href="https://www.cnblogs.com/yangstar/articles/16688692.html" >文章<i class="fas fa-external-link-alt"></i></a>说怎么处理图片不显示的</p><blockquote><p>解决方法 ：只需要在markdown文章开头添加一个<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code></p></blockquote><p>关于他说的 403 报错我倒是没看见。接着用回 bilibili 图床吧。官方说的创建一个同名的文件夹放图片感觉不好很麻烦，不想试。</p><p>关于为什么要写博客，找到一段很能描述我内心的<a class="link"   href="https://sspai.com/post/59337#!" >文章<i class="fas fa-external-link-alt"></i></a>，下面是其中的引用</p><blockquote><p>我是从去年入的个人博客的坑，当中尝试过很多不同的方式，也碰到过好不容易写完的博文说没就没了的尴尬场面。但我最后还是选择继续用下去，因为我觉得写博文真的是一件非常快乐的事情，虽然可能没有听众，但是把自己知道的，摸索出来的东西写下来，分享出来，并不单单是想要别人来看，更有一种记录生活的感觉。</p><p>如果是像我一样喜欢折腾的人，那么选择自己搭建个人博客，势必会走上一条曲折的道路。自己跟着教程一步步走下来，最后得到的，却也许并不是原先期望的那样。不喜欢折腾的人也许就会将就着用下去，但我倔强地坚持要得到我想要的。自己不断寻找问题，解决问题，那么在解决的那一刻真的是浑身舒畅。但是然后呢？我选择把整个过程或是解决方案记录下来，放在博客里。每次折腾势必会看到，告诉我自己已经解决了那么多的困难，这一次也一定能成功。它能够激励我不断走下去。</p><p>那对与不喜欢折腾的人来说呢？这样的记录就毫无意义了吗？显然并不是这样。如我开头所言，将生活记录下来，过一段时间再打开，回想起当时的情形，真的是让我感到很温暖的一件事情。人们喜欢拍照，录像，通过照片与视频将生活记录下来。而我觉得，通过文字记录生活更是一个不错的选择。况且上传到博客上，说不定哪天就有人看到，留下自己的看法，或者能够一起讨论，似乎也很美好。</p><p>也因此，我写了这样的一篇文章，希望有更多的人能喜欢上个人博客这样的记录方式。提到自建，许多人的第一反应就是麻烦，复杂，因此我尽可能地详细写了搭建的各个步骤，就是希望能够让更多的人跨过这道门槛，通过个人博客的方式，记录生活，分享生活。</p></blockquote><p>上面这一部分 Obsidian 预览和浏览器预览效果不一样，原因是除了第一段，没在文字段➕ <code>&gt;</code> ，只给空行加了，在 Obsidian 看起来就和加了一样，看来不能偷懒啊，还有就是去重温一下引用的语法 😿。</p><p>（我要成为 emoji 高手 😅）</p><p>Obsidian 的模板真好用啊，才发现 Hexo 的标题是文章名。</p><p>还有关于首页展示，我写的 markdown 语法那个，太丑了，他又每个都是将前面的内容显示在首页， 发现可以使用 <code>excerpt</code> 标签显示内容，就不会直接显示文章的前面部分内容了。读完 <code>keep主题使用手册</code> 的写作部分文章摘要与截断部分，知道 Hexo 支持三种方式实现刚才的功能。</p><blockquote><ol><li>expert<br>2.<code> &lt;!--more--&gt;</code> (写完才发现没显示，应该是当作注释了，也难怪不起作用了)</li><li>自动截断，Keep 主题将自动截取前 168 个字符。</li></ol></blockquote><p>优先级从高到底也是 1-3 。</p><p>实战为先，发现第二个方法没用啊，第三个有不符合我的要求，只能使用 excerpt 来实现了，在 Obsidian 中又一直推用过的，看看到时候满了是什么情况。</p><p>研究了一会自动化部署到 GitHub ，通过 GitHub Actions 自动部署，没成功，吸引我的原因是</p><blockquote><p>如果手动部署，需要先执行 <code>hexo g</code> 编译生成静态文件， 然后推送 <code>public</code> 整个文件夹到 GitHub 上，当后期网站文章、图片较多时候，很多时候连接 GitHub 不是那么顺畅，经常要傻等很长的上传时间。使用 GitHub Actions 自动部署，你只需 <code>push</code> _post 文件里单独的 <code>md</code> 文件即可，其他不用管。</p></blockquote><p>关于最开始要不要把所有的配置这些放上去也不知道，以后再试吧，只是怕以后说不定真的文章图片多了变慢，我以为只会推变化的东西上去呢。</p><p>不知道为啥，写完之后报错了，似乎是 <code>hexo-reference</code> 这个插件的问题。很怕再次出错，所以使用 git 刻不容缓。</p><p><img                         lazyload                       alt="image"                       data-src="https://i0.hdslb.com/bfs/article/961ae819edae7bcde0514d57349b90f13546702569015608.jpg"                        alt="image.png"                 ></p><p>没找到用原生 markdown 语法修改图片大小的，都使用的 HTML 语法，但是我用的插件也不行啊，算了，感觉我也不会用到太多的图片，说不定博客都是三天打渔两天晒网。</p><h1 id="picgo"><a href="#picgo" class="headerlink" title="picgo"></a>picgo</h1><p>首先要下载 bilibili 插件，然后登录打开控制台获取 <code>SESSDATA</code> 和 <code>bili_jct</code> 就可以使用了。</p><p>开了上传前重命名，给的链接跟名字没有关系，就关掉了。</p><p>相册删掉就没有了，也不知道用的那个图床，只能去 log 里面找，我以为 log 会是分开的，有 success、info、error 等等，结果仍然是在一个 log 文件里。</p><p>我还想尝试下像 GitHub 的图床那样把没用的删了，找不到，想开了，不管了。</p><p>至于图片，有个帖子说在本地备份一个，到时候就算服务器跑路了也可以批量修改重新上传，怎么上传呢，搜到了这样一段话</p><blockquote><p>社区没找到批量将本地图片上传图床的插件。我做过类似手动操作，不过前提是，我的几百张图片都放在同一个文件夹下。</p><ul><li>批量把整个图片文件夹上传到图床，获取图床的前缀链接。 </li><li>用正则表达式批量替换库内的有图片引用的文件，加上图床的前缀链接。</li></ul></blockquote><p>可不可行以后再说吧，不过这样就不能用QQ的截图了，不能保存。</p><p>还要用到正则表达式，以前学过，没地方用，忘了。忘了的还有摩斯密码，之前想着用手指敲摩斯密码来辅助记单词形成肌肉记忆的。</p><p>为了账号安全，重新创了个小号，正式会员的问题都让我很好笑。</p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>使用 git 的时候总会提示 <code>CRLF</code> 和 <code>LF</code> ，搜了一下，</p><ul><li><code>LF</code>：”\n”，Linux的换行符</li><li><code>CRLF</code>：”\r\n”，Windows的换行符</li></ul><p>补充：</p><ul><li>CR：Carriage Return，对应 ASCII 中转义字符 \r，表示回车</li><li>LF：Linefeed，对应 ASCII 中转义字符 \n，表示换行</li><li>CRLF：Carriage Return &amp; Linefeed，\r\n，表示回车并换行</li></ul><p>原因说了三个，两个人为的，在不同系统直接写代码，一个系统的原因</p><blockquote><p>git的 <code>core.autocrlf</code>这个配置是True，即git pull时自动将远程代码里的换行符（比如LF）转换成当前系统的换行符（比如CRLF）<br>Windows系统解决办法：修改 git 全局配置，禁止 git 自动将 lf 转换成 crlf, 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>再次查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git config --global -l</span><br></pre></td></tr></table></figure></blockquote><p>结果如下：<code>core.autocrlf=false</code></p><p>看了一下自己的，发现还是显示的 true ，可能是全局和个人不一样，全局能覆盖个人吧，不过我怎么感觉是个人覆盖全局呢。</p><p>关于 git 的设置目录，Windows 在用户文件夹的 <code>.gitconfig</code> 文件中，显示的也只是全局设置。</p><ul><li><code>--local</code> 仓库级，只对某一个仓库起作用。</li><li><code>--global</code> 用户级，只对当前用户起作用。</li><li><code>--system</code> 系统级，对本电脑所以用户起作用。</li></ul><p>我也没有用 Linux，所以应该是 Obsidian 是使用的 LF。搜索了一下，的确如我想象的那样，😄。</p><h1 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h1><p>对于使用 markdown 写的文章，复制过来之后引用只能多次使用 <code>&gt;</code> 很麻烦，也没找到好办法，还有就是切换文件之后再回来只能从头开始，对于写长文章的来说有点麻烦了。有增加标签页，但是不像普通编辑器那样直接双击之后点击其他文章就新开一个标签页那样自然（可能是我没有发现，希望如果有人发现这篇文章并且恰好知道怎么做，在评论区留言）。</p><p>没找到 markdown 语法中的引用，找到了其他的引用，似乎并没有什么用。</p><p>突然想起有大纲啊，这下是我愚蠢了。</p><p>不知道为啥我的 git 语法写到后面 Obsidian 不渲染了，网页上正常，阅读视图也正常，难道是因为使用 VSCode 联合编辑导致语法不对吗。但是复制代码过来总是代码块很麻烦啊删着。</p><p>一点一点删了试终于发现问题了，git 语句没有用``引起来。</p>]]></content>
    
    
    <summary type="html">博客建立之路坎坷</summary>
    
    
    
    
    <category term="图床" scheme="http://lsfny.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="碎碎念" scheme="http://lsfny.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客（II）</title>
    <link href="http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88II%EF%BC%89/"/>
    <id>http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88II%EF%BC%89/</id>
    <published>2024-06-13T05:20:22.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><ul><li>使用<code>Shift + alt + ➡️</code>即可实现扩大选区（感觉还是不如 IDEA 的<code>Ctrl+W</code>）</li></ul><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>使用<code>Ctrl + F5</code>可以强制刷新，应该是清掉缓存了，不需要再打开开发者模式删除缓存。</p><p>知道这个的原因是昨天将 Hexo 部署到 GitHub Pages，显示与本地不一样，搜索了一下，需要先<code>hexo clean</code>清除缓存。今天试了一下，可以了。好多问题都是缓存啊，而且我对于缓存一点都不了解。</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>如果博客没有 title 无法使用主题的搜索功能。</p><p>使用的<code>keep</code>主题，都挺好，美中不足的是代码部分右上角不能显示类型，shell是可以显示的，像<code>conf</code>这样的文件就显示不了。测试了一下，<code>yml</code>也是可以显示的，所以代码应该是都可以显示的，只是不能像 Obsidian 编辑时一样罢了，Obsidian 使用的阅读视图使<code>shell</code>类型都不显示的。</p><p>拥有的博客不多，所以自动化部署还用不上。加上设置得差不多之后，只要写完之后使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>也不是太麻烦的事。文章名使用的模板都是日期，好在试了一下，可以修改 title 即可，文件名甚至都不需要修改，至于在<code> _posts</code> 文件夹下嵌套可不可行还不知道。</p><p>嵌套是可以的，就是部署之后路径名多了好长一串，看着不好看，大概是有解决方法的，我看见过。</p><p>将<code>_config.yml</code>中的 <code>permalink</code> 从 <code>permalink: :year/:month/:day/:title/</code> 修改为 <code>permalink: :title/</code> 即可。</p><p>重复修改之后主题再上传到 GitHub Page 发现内容分发变成了三个，比我预想的还要多一个，想的是应该覆盖，奈何天不遂人愿。找不到办法就删库吧。</p><p>删库了，重新上传了，然后发现如果不开梯子 logo 显示不出来，我试了重新创建一个 index.html 文件，用图床的链接，很快就加载出来了，为什么呢。</p><p>有个好消息，把前缀这些弄掉后使用文件夹嵌套不就可以了吗，还不用担心文件夹很乱，现在的 GitHub 上的文件看着就全在主页面，看着就令人担心。</p><h1 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h1><p>很容易将 Obsidian 大成 Obdisian，还有把`大成<code>tab</code>。</p><p>Obsidian里使用<code>tab</code>在编辑的时候会将整行后移两个字符，阅读视图不会有影响。最开始还以为会是引用的效果。</p><p>关于 tag，最开始使用的时候发现有候选，我明明什么都没写。展开 Obsidian 右栏之后有 标签，发现是 node_modules 中的，最开始打算一个一个删，因为是更新日志删了不影响。为了效率，发现将这个文件夹忽略即可。</p><p>将小写的 Obsidian 换成了大写，还好不多。不过 Obsidian 似乎没有<code>Ctrl + R</code>进行替换的功能啊。</p><p>关于tag，使用<code># + 字符串</code>就能实现tag（可以有数字，但是不能全是数字），<code>keep</code>主题的tag我还不会用，看到过默认主题<code>landscapes</code>的 tag，看着有用，所以就尝试使用 tag了。</p><p>关于博客的中文英文直接要不要加空格，感觉加了好看，但是如果有人复制又要去一个个调整格式会很麻烦。我看到的好像是英语标点之后加空格，记不清了。决定的是添加空格，这样好看，不过需要慢慢养成一个习惯了。</p><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><p>使用 picgo 将图片上传到 GitHub 失败，发现有日志，显示的 <code>Request failed with status code 401</code>，身份认证失败好像是，将 token 更新就能用了。</p><p>为什么要用图床，我的博客本地预览可以看，但是部署到 GitHub 之后就 logo 和头像都显示不了，只能去用图床了，希望加载可以快点。</p><p>关于 piggo，VSCode 的插件将网址保存在了用户目录的<code>vs-picgo-data.json</code>文件中，客户端的在软件的相册中。</p><p><img                         lazyload                       alt="image"                       data-src="/images/avatar.jpg"                        alt="image"                 ></p>]]></content>
    
    
    <summary type="html">再会 Hexo</summary>
    
    
    
    
    <category term="碎碎念" scheme="http://lsfny.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    <category term="Obsidian" scheme="http://lsfny.github.io/tags/Obsidian/"/>
    
    <category term="VSCode" scheme="http://lsfny.github.io/tags/VSCode/"/>
    
    <category term="学习记录" scheme="http://lsfny.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="浏览器" scheme="http://lsfny.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客（I）</title>
    <link href="http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88I%EF%BC%89/"/>
    <id>http://lsfny.github.io/blog/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%88I%EF%BC%89/</id>
    <published>2024-06-12T13:37:54.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu网络无法连接"><a href="#Ubuntu网络无法连接" class="headerlink" title="Ubuntu网络无法连接"></a>Ubuntu网络无法连接</h1><ol><li>删除NetworkManager缓存文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop</span><br><span class="line"><span class="built_in">rm</span> /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>/etc/NetworkManager/NetworkManager.conf</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">managed=true </span><br></pre></td></tr></table></figure><ol start="3"><li>重启NetworkManager</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager restart</span><br></pre></td></tr></table></figure><h1 id="Ubuntu没有node和npm"><a href="#Ubuntu没有node和npm" class="headerlink" title="Ubuntu没有node和npm"></a>Ubuntu没有node和npm</h1><ol><li>使用<code>sudo apt install nodejs npm</code></li><li>注意值安装<code>node</code>不会自带<code>npm</code></li><li>安装的版本低，更新麻烦，放弃了</li></ol><h1 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h1><p>VMware开机关机的时候会使用麦克风</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>使用不支持的语法<code>hexo g</code>将报错，例如<code>[dco], &#123;#id&#125;</code></p><p>同时默认不支持LaTeX语法，使用主题可能可以使用，有待实验。</p>]]></content>
    
    
    <summary type="html">初识 Hexo</summary>
    
    
    
    
    <category term="#学习记录" scheme="http://lsfny.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Ubuntu" scheme="http://lsfny.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://lsfny.github.io/blog/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://lsfny.github.io/blog/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2024-06-12T06:59:40.000Z</published>
    <updated>2024-07-04T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><ul><li>标题 #</li><li>段落 两个回车</li><li>换行 多个空格或<code>&lt;br&gt;</code></li><li>强调 **</li><li>引用 &gt;</li><li>列表 1. - ，可使用tab保留连续性同时添加另一种元素</li><li>代码块 四个缩进或```</li><li>代码 `</li><li>分割线 —</li><li>链接 <code>[]()</code></li><li>图片 <code>![]()</code></li></ul><h1 id="拓展语法"><a href="#拓展语法" class="headerlink" title="拓展语法"></a>拓展语法</h1><ul><li>表格 围栏代码块 </li><li>标题编号（obsidian似乎不支持）</li><li>定义列表 </li><li>脚注 <code>[^1] [^1]:</code></li><li>删除线 ~~</li><li>任务列表 - []</li><li>emoji : :</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>下划线 <code>&lt;u&gt;hello&lt;/u&gt;</code><br>  效果：<u>hello</u></li><li>注释 %% hello world %% </li><li>变量 []: </li><li>放大文本 <code>&lt;big&gt;big&lt;/big&gt;</code><br>  效果：<big>big</big></li><li>缩小文本 <code>&lt;small&gt;small&lt;/small&gt;</code><br>  效果：<small>small</small></li><li>多彩文本 <code>&lt;font color=orange&gt;这是一段橘色文本&lt;/font&gt;</code><br>  效果：<li>高亮 <code>==这里是一段高亮文本==</code><br>  效果：==这里是一段高亮文本==</li><li>上标 x^2^ （Obsidian中不支持，可以使用LaTeX）</li><li>下标 H<del>2</del>o （同上）</li><li>行内公式 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex;" xmlns="http://www.w3.org/2000/svg" width="21.508ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 9506.4 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2231,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2731,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3525.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4525.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(5247.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msqrt" transform="translate(6247.9,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="572" height="60" x="853" y="723"></rect></g><g data-mml-node="mo" transform="translate(7950.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9006.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></li><li>公式块 <code>$$\begin{array}{lll} \nabla\times E &amp;=&amp; -\;\frac{\partial{B}}{\partial{t}} \ \nabla\times H &amp;=&amp; \frac{\partial{D}}{\partial{t}}+J \ \nabla\cdot D &amp;=&amp; \rho \ \nabla\cdot B &amp;=&amp; 0 \ \end{array}$$</code>（在Hexo中需要下载插件实现支持）<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.861ex;" xmlns="http://www.w3.org/2000/svg" width="66.675ex" height="2.852ex" role="img" focusable="false" viewBox="0 -880.4 29470.5 1260.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,-19.2)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(1055.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(2055.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g><g data-mml-node="mtd" transform="translate(3819.4,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(5597.4,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mfrac" transform="translate(1222.7,0)"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(360.7,-345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><rect width="1136.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mtext" transform="translate(2599.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2849.6,0)"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(3904.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(4905,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mtd" transform="translate(12390.5,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(14168.5,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(385.1,-345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><rect width="1185.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1647.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2648.2,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mtext" transform="translate(3281.2,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(3531.2,0)"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(4586.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5086.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(21083.1,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(22861.1,0)"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mtext" transform="translate(517,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(767,0)"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(1822.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(2322.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mtd" transform="translate(26942.5,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(28720.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g></g></g></g></g></g></svg></mjx-container></li></li></ul>]]></content>
    
    
    <summary type="html">超简化 markdown 语法</summary>
    
    
    
    
  </entry>
  
</feed>
